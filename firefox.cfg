//start
lockPref("librewolf.cfg.version", "6.2");
lockPref("browser.contentblocking.category", "strict");
lockPref("network.cookie.cookieBehavior", 5); // enforce dFPI
lockPref("privacy.partition.serviceWorkers", true); // isolate service workers
lockPref("network.cookie.lifetimePolicy", 2); // keep cookies until end of the session, then clear
lockPref("network.cookie.thirdparty.sessionOnly", true);
lockPref("network.cookie.thirdparty.nonsecureSessionOnly", true);
lockPref("privacy.clearOnShutdown.cookies", false);
lockPref("privacy.sanitize.sanitizeOnShutdown", true);
lockPref("privacy.sanitize.timeSpan", 0);
lockPref("browser.cache.disk.enable", false); // disable disk cache
lockPref("browser.privatebrowsing.forceMediaMemoryCache", true);
lockPref("media.memory_cache_max_size", 65536);
lockPref("browser.shell.shortcutFavicons", false);
lockPref("browser.pagethumbnails.capturing_disabled", true);
lockPref("browser.helperApps.deleteTempFileOnExit", true); // delete temporary files opened with external apps
lockPref("privacy.history.custom", true);
lockPref("browser.privatebrowsing.autostart", false);
lockPref("browser.formfill.enable", false); // disable form history
lockPref("browser.sessionstore.privacy_level", 2); // prevent websites from storing session data like cookies and forms
lockPref("browser.sessionstore.interval", 60000); // increase time between session saves
lockPref("privacy.query_stripping.enabled", true);
lockPref("privacy.query_stripping.strip_list", "__hsfp __hssc __hstc __s _hsenc _openstat dclid fbclid gbraid gclid hsCtaTracking igshid mc_eid ml_subscriber ml_subscriber_hash msclkid oly_anon_id oly_enc_id rb_clickid s_cid twclid vero_conv vero_id wbraid wickedid yclid");
lockPref("librewolf.uBO.assetsBootstrapLocation", "https://gitlab.com/librewolf-community/browser/source/-/raw/main/assets/uBOAssets.json");
lockPref("dom.security.https_only_mode", true); // only allow https in all windows, including private browsing
lockPref("network.auth.subresource-http-auth-allow", 1); // block HTTP authentication credential dialogs
lockPref("security.mixed_content.block_display_content", true); // block insecure passive content
lockPref("network.dns.disableIPv6", true);
lockPref("network.http.referer.XOriginPolicy", 0); // default, might be worth changing to 2 to stop sending them completely
lockPref("network.http.referer.XOriginTrimmingPolicy", 2); // trim referer to only send scheme, host and port
lockPref("media.peerconnection.ice.no_host", true); // don't use any private IPs for ICE candidate
lockPref("media.peerconnection.ice.default_address_only", true); // use a single interface for ICE candidates, the vpn one when a vpn is used
lockPref("network.gio.supported-protocols", ""); // disable gio as it could bypass proxy
lockPref("network.file.disable_unc_paths", true); // hidden, disable using uniform naming convention to prevent proxy bypass
lockPref("network.proxy.socks_remote_dns", true); // forces dns query through the proxy when using one
lockPref("media.peerconnection.ice.proxy_only_if_behind_proxy", true); // force webrtc inside proxy when one is used
lockPref("network.trr.confirmationNS", "skip"); // skip undesired doh test connection
lockPref("network.dns.disablePrefetch", true); // disable dns prefetching
lockPref("network.trr.mode", 2);
lockPref("network.trr.uri", "https://dns.quad9.net/dns-query");
lockPref("network.predictor.enabled", false);
lockPref("network.prefetch-next", false);
lockPref("network.http.speculative-parallel-limit", 0);
lockPref("browser.places.speculativeConnect.enabled", false);
lockPref("browser.urlbar.dnsResolveSingleWordsAfterSearch", 0);
lockPref("browser.urlbar.speculativeConnect.enabled", false);
lockPref("browser.fixup.alternate.enabled", false);
lockPref("network.manage-offline-status", false);
lockPref("privacy.resistFingerprinting", true);
lockPref("privacy.resistFingerprinting.block_mozAddonManager", true); // prevents rfp from breaking AMO
lockPref("browser.startup.blankWindow", false); // if set to true it breaks RFP windows resizing
lockPref("browser.display.use_system_colors", false); // default but enforced due to RFP
lockPref("privacy.window.maxInnerWidth", 1920);
lockPref("privacy.window.maxInnerHeight", 1080);
lockPref("privacy.resistFingerprinting.letterboxing", false);
lockPref("webgl.disabled", true);
lockPref("fission.autostart", true);
lockPref("security.cert_pinning.enforcement_level", 2); // enable strict public key pinning, might cause issues with AVs
lockPref("security.pki.sha1_enforcement_level", 1); // disable sha-1 certificates
lockPref("security.ssl.require_safe_negotiation", true);
lockPref("security.ssl.treat_unsafe_negotiation_as_broken", true);
lockPref("security.remote_settings.crlite_filters.enabled", true);
lockPref("security.pki.crlite_mode", 2); // mode 2 means enforce CRL checks
lockPref("security.OCSP.enabled", 1); // default
lockPref("security.OCSP.require", true); // set to hard-fail
lockPref("security.tls.enable_0rtt_data", false); // disable 0 RTT to improve tls 1.3 security
lockPref("security.tls.version.enable-deprecated", false); // make TLS downgrades session only by enforcing it with pref()
lockPref("browser.ssl_override_behavior", 1);
lockPref("browser.xul.error_pages.expert_bad_cert", true);
lockPref("permissions.delegation.enabled", false); // force permission request to show real origin
lockPref("permissions.manager.defaultsUrl", ""); // revoke special permissions for some mozilla domains
lockPref("gfx.font_rendering.opentype_svg.enabled", false); // disale svg opentype fonts
lockPref("browser.safebrowsing.malware.enabled", false);
lockPref("browser.safebrowsing.phishing.enabled", false);
lockPref("browser.safebrowsing.blockedURIs.enabled", false);
lockPref("browser.safebrowsing.provider.google4.gethashURL", "");
lockPref("browser.safebrowsing.provider.google4.updateURL", "");
lockPref("browser.safebrowsing.provider.google.gethashURL", "");
lockPref("browser.safebrowsing.provider.google.updateURL", "");
lockPref("browser.safebrowsing.downloads.enabled", false);
lockPref("browser.safebrowsing.downloads.remote.enabled", false);
lockPref("browser.safebrowsing.downloads.remote.url", "");
lockPref("browser.safebrowsing.downloads.remote.block_potentially_unwanted", false);
lockPref("browser.safebrowsing.downloads.remote.block_uncommon", false);
lockPref("browser.safebrowsing.passwords.enabled", false);
lockPref("browser.safebrowsing.provider.google4.dataSharing.enabled", false);
lockPref("browser.safebrowsing.provider.google4.dataSharingURL", "");
lockPref("security.csp.enable", true); // enforce csp, default
lockPref("network.IDN_show_punycode", true); // use punycode in idn to prevent spoofing
lockPref("pdfjs.enableScripting", false); // disable js scripting in the built-in pdf reader
lockPref("geo.provider.network.url", "https://location.services.mozilla.com/v1/geolocate?key=%MOZILLA_API_KEY%");
lockPref("geo.provider.ms-windows-location", false); // [WINDOWS]
lockPref("geo.provider.use_corelocation", false); // [MAC]
lockPref("geo.provider.use_gpsd", false); // [LINUX]
lockPref("javascript.use_us_english_locale", true);
lockPref("intl.accept_languages", "en-US, en");
lockPref("browser.region.network.url", "");
lockPref("browser.region.update.enabled", false);
lockPref("media.eme.enabled", false); // master switch for drm content
lockPref("media.gmp-manager.url", "data:text/plain,"); // prevent checks for plugin updates when drm is disabled
lockPref("media.gmp-provider.enabled", false);
lockPref("media.gmp-gmpopenh264.enabled", false);
lockPref("browser.urlbar.suggest.searches", false);
lockPref("browser.search.suggest.enabled", false);
lockPref("browser.search.update", false);
lockPref("browser.urlbar.trimURLs", false);
lockPref("browser.urlbar.quicksuggest.enabled", false);
lockPref("browser.urlbar.quicksuggest.enabled", false);
lockPref("browser.urlbar.suggest.quicksuggest.nonsponsored", false);
lockPref("browser.urlbar.suggest.quicksuggest.sponsored", false);
lockPref("browser.urlbar.quicksuggest.dataCollection.enabled", false); // default
lockPref("browser.download.useDownloadDir", false);
lockPref("browser.download.autohideButton", false); // do not hide download button automatically
lockPref("browser.download.manager.addToRecentDocs", false); // do not add downloads to recents
lockPref("browser.download.alwaysOpenPanel", false); // do not expand toolbar menu for every download, we already have enough interaction
lockPref("media.autoplay.blocking_policy", 2);
lockPref("media.autoplay.default", 5);
lockPref("dom.disable_beforeunload", true); // disable "confirm you want to leave" pop-ups
lockPref("dom.disable_open_during_load", true); // block pop-ups windows
lockPref("dom.popup_allowed_events", "click dblclick mousedown pointerdown");
lockPref("dom.disable_window_move_resize", true);
lockPref("browser.link.open_newwindow", 3);
lockPref("browser.link.open_newwindow.restriction", 0);
lockPref("middlemouse.contentLoadURL", false); // prevent mouse middle click from opening links
lockPref("extensions.webextensions.restrictedDomains", "");
lockPref("extensions.enabledScopes", 5); // hidden
lockPref("extensions.postDownloadThirdPartyPrompt", false);
lockPref("extensions.systemAddon.update.enabled", false);
lockPref("extensions.systemAddon.update.url", "");
lockPref("extensions.webcompat-reporter.enabled", false);
lockPref("extensions.webcompat-reporter.newIssueEndpoint", "");
lockPref("extensions.webextensions.base-content-security-policy", "default-src 'none'; script-src 'none'; object-src 'none';");
lockPref("extensions.webextensions.base-content-security-policy.v3", "default-src 'none'; script-src 'none'; object-src 'none';");
lockPref("app.update.auto", false);
lockPref("identity.fxaccounts.enabled", false);
lockPref("signon.rememberSignons", false);
lockPref("signon.autofillForms", false);
lockPref("extensions.formautofill.available", "off");
lockPref("extensions.formautofill.addresses.enabled", false);
lockPref("extensions.formautofill.creditCards.enabled", false);
lockPref("extensions.formautofill.creditCards.available", false);
lockPref("extensions.formautofill.heuristics.enabled", false);
lockPref("signon.formlessCapture.enabled", false);
lockPref("privacy.userContext.enabled", true);
lockPref("privacy.userContext.ui.enabled", true);
lockPref("devtools.chrome.enabled", false);
lockPref("devtools.debugger.remote-enabled", false);
lockPref("devtools.remote.adb.extensionURL", "");
lockPref("devtools.selfxss.count", 0); // required for devtools console to work
lockPref("browser.translation.engine", ""); // remove translation engine
lockPref("accessibility.force_disabled", 1); // block accessibility services
lockPref("webchannel.allowObject.urlWhitelist", ""); // do not receive objects through webchannels
lockPref("app.support.baseURL", "https://librewolf.net/docs/faq/#");
lockPref("browser.search.searchEnginesURL", "https://librewolf.net/docs/faq/#how-do-i-add-a-search-engine");
lockPref("browser.geolocation.warning.infoURL", "https://librewolf.net/docs/faq/#how-do-i-enable-location-aware-browsing");
lockPref("app.feedback.baseURL", "https://librewolf.net/#questions");
lockPref("app.releaseNotesURL", "https://gitlab.com/librewolf-community/browser");
lockPref("app.releaseNotesURL.aboutDialog", "https://gitlab.com/librewolf-community/browser");
lockPref("app.update.url.details", "https://gitlab.com/librewolf-community/browser");
lockPref("app.update.url.manual", "https://gitlab.com/librewolf-community/browser");
lockPref("browser.startup.homepage_override.mstone", "ignore");
lockPref("startup.homepage_override_url", "about:blank");
lockPref("startup.homepage_welcome_url", "about:blank");
lockPref("startup.homepage_welcome_url.additional", "");
lockPref("browser.messaging-system.whatsNewPanel.enabled", false);
lockPref("browser.uitour.enabled", false);
lockPref("browser.uitour.url", "");
lockPref("browser.shell.checkDefaultBrowser", false);
lockPref("browser.newtab.preload", false);
lockPref("browser.newtabpage.activity-stream.section.highlights.includeDownloads", false);
lockPref("browser.newtabpage.activity-stream.section.highlights.includeVisited", false);
lockPref("browser.newtabpage.activity-stream.feeds.topsites", false);
lockPref("browser.newtabpage.activity-stream.feeds.section.topstories", false);
lockPref("browser.newtabpage.activity-stream.feeds.system.topstories", false);
lockPref("browser.newtabpage.activity-stream.feeds.telemetry", false);
lockPref("browser.newtabpage.activity-stream.feeds.section.topstories.options", "{\"hidden\":true}"); // hide buggy pocket section from about:preferences#home
lockPref("browser.newtabpage.activity-stream.showSponsored", false);
lockPref("browser.newtabpage.activity-stream.showSponsoredTopSites", false);
lockPref("browser.newtabpage.activity-stream.telemetry", false);
lockPref("browser.newtabpage.activity-stream.default.sites", "");
lockPref("browser.newtabpage.activity-stream.feeds.discoverystreamfeed", false);
lockPref("browser.newtabpage.activity-stream.discoverystream.enabled", false);
lockPref("browser.newtabpage.activity-stream.feeds.snippets", false); // default
lockPref("browser.contentblocking.report.lockwise.enabled", false);
lockPref("browser.contentblocking.report.monitor.enabled", false);
lockPref("browser.contentblocking.report.hide_vpn_banner", true);
lockPref("browser.contentblocking.report.vpn.enabled", false);
lockPref("browser.contentblocking.report.show_mobile_app", false);
lockPref("browser.vpn_promo.enabled", false);
lockPref("extensions.htmlaboutaddons.recommendations.enabled", false);
lockPref("extensions.getAddons.showPane", false);
lockPref("extensions.getAddons.cache.enabled", false); // disable fetching of extension metadata
lockPref("lightweightThemes.getMoreURL", ""); // disable button to get more themes
lockPref("browser.topsites.useRemoteSetting", false); // hide sponsored shortcuts button
lockPref("browser.aboutConfig.showWarning", false);
lockPref("browser.preferences.moreFromMozilla", false);
lockPref("browser.newtabpage.activity-stream.asrouter.userprefs.cfr.features", false);
lockPref("browser.newtabpage.activity-stream.asrouter.userprefs.cfr.addons", false);
lockPref("toolkit.telemetry.unified", false); // master switch
lockPref("toolkit.telemetry.enabled", false);  // master switch
lockPref("toolkit.telemetry.server", "data:,");
lockPref("toolkit.telemetry.archive.enabled", false);
lockPref("toolkit.telemetry.newProfilePing.enabled", false);
lockPref("toolkit.telemetry.updatePing.enabled", false);
lockPref("toolkit.telemetry.firstShutdownPing.enabled", false);
lockPref("toolkit.telemetry.shutdownPingSender.enabled", false);
lockPref("toolkit.telemetry.shutdownPingSender.enabledFirstSession", false); // default
lockPref("toolkit.telemetry.bhrPing.enabled", false);
lockPref("toolkit.telemetry.reportingpolicy.firstRun", false); // default
lockPref("toolkit.telemetry.cachedClientID", "");
lockPref("toolkit.telemetry.previousBuildID", "");
lockPref("toolkit.telemetry.server_owner", "");
lockPref("toolkit.coverage.opt-out", true); // hidden
lockPref("toolkit.telemetry.coverage.opt-out", true); // hidden
lockPref("toolkit.coverage.enabled", false);
lockPref("toolkit.coverage.endpoint.base", "");
lockPref("toolkit.crashreporter.infoURL", "");
lockPref("datareporting.healthreport.uploadEnabled", false);
lockPref("datareporting.policy.dataSubmissionEnabled", false);
lockPref("security.protectionspopup.recordEventTelemetry", false);
lockPref("browser.ping-centre.telemetry", false);
lockPref("app.normandy.enabled", false);
lockPref("app.normandy.api_url", "");
lockPref("app.shield.optoutstudies.enabled", false);
lockPref("browser.discovery.enabled", false);
lockPref("browser.discovery.containers.enabled", false);
lockPref("browser.discovery.sites", "");
lockPref("browser.tabs.crashReporting.sendReport", false);
lockPref("breakpad.reportURL", "");
lockPref("network.connectivity-service.enabled", false);
lockPref("network.captive-portal-service.enabled", false);
lockPref("captivedetect.canonicalURL", "");
lockPref("beacon.enabled", false);
lockPref("app.update.service.enabled", false);
lockPref("app.update.background.scheduling.enabled", false);
lockPref("default-browser-agent.enabled", false); // disable windows specific telemetry
lockPref("network.protocol-handler.external.ms-windows-store", false); // prevent links from launching windows store
lockPref("toolkit.winRegisterApplicationRestart", false); // disable automatic start and session restore after reboot
lockPref("security.family_safety.mode", 0); // disable win8.1 family safety cert
lockPref("network.http.windows-sso.enabled", false); // disable MS auto authentication via sso
// Custom Config
lockPref("browser.newtabpage.activity-stream.telemetry.structuredIngestion.endpoint", "");
lockPref("browser.urlbar.suggest.remotetab", false);
lockPref("privacy.resistFingerprinting.autoDeclineNoUserInputCanvasPrompts", true);
lockPref("dom.security.unexpected_system_load_telemetry_enabled", false);
lockPref("network.trr.confirmation_telemetry_enabled", false);
lockPref("security.app_menu.recordEventTelemetry", false);
lockPref("security.certerrors.recordEventTelemetry", false);
lockPref("security.identitypopup.recordEventTelemetry", false);
lockPref("toolkit.telemetry.pioneer-new-studies-available", false);
lockPref("toolkit.telemetry.testing.overrideProductsCheck", false);
lockPref("toolkit.telemetry.pioneer-new-studies-available", false);
lockPref("privacy.clearOnShutdown.cache", true);
lockPref("privacy.clearOnShutdown.cookies", true);
lockPref("privacy.clearOnShutdown.downloads", true);
lockPref("privacy.clearOnShutdown.formdata", true);
lockPref("privacy.clearOnShutdown.history", true);
lockPref("privacy.clearOnShutdown.offlineApps", true);
lockPref("privacy.clearOnShutdown.openWindows", true);
lockPref("privacy.clearOnShutdown.sessions", true);
lockPref("privacy.clearOnShutdown.siteSettings", true);
lockPref("privacy.trackingprotection.annotate_channels", true);
lockPref("privacy.trackingprotection.cryptomining.enabled", true);
lockPref("privacy.trackingprotection.enabled", true);
lockPref("privacy.trackingprotection.socialtracking.enabled", true);
lockPref("privacy.donottrackheader.enabled", true);
lockPref("privacy.trackingprotection.fingerprinting.enabled", true);
lockPref("privacy.trackingprotection.pbmode.enabled", true);
lockPref("browser.safebrowsing.downloads.remote.url", "")
lockPref("browser.safebrowsing.provider.google4.reportURL", "")
lockPref("browser.safebrowsing.provider.google.reportURL", "")
lockPref("browser.safebrowsing.provider.google4.dataSharingURL", "")
lockPref("media.gmp-widevinecdm.autoupdate", false);
lockPref("media.gmp-widevinecdm.enabled", false);
lockPref("media.gmp-widevinecdm.visible", false);
lockPref("media.peerconnection.enabled", false);
lockPref("network.allow-experiments", false);
lockPref("experiments.enabled", false);
lockPref("experiments.supported", false);
lockPref("geo.experiments.activeExperiment", false);
lockPref("extensions.pocket.enabled", false);
lockPref("extensions.pocket.api", "");
lockPref("extensions.pocket.site", "");
lockPref("geo.enable", false);
lockPref("geo.enabled", false);
lockPref("accessibility.typeaheadfind", false);
lockPref("accessibility.typeaheadfind.autostart", false);
lockPref("accessibility.typeaheadfind.prefillwithselection", false);
lockPref("accessibility.browsewithcaret", false);
lockPref("browser.newtabpage.activity-stream.section.highlights.includePocket", false);
lockPref("browser.urlbar.showSearchSuggestionsFirst", false);
lockPref("signon.generation.enabled", false);
lockPref("places.history.enabled", false);
lockPref("layout.spellcheckDefault", 0);
lockPref("browser.urlbar.suggest.bookmark", false);
lockPref("browser.urlbar.suggest.engines", false);
lockPref("browser.urlbar.suggest.openpage", false);
lockPref("browser.urlbar.suggest.topsites", false);
lockPref("browser.urlbar.suggest.history", false);
lockPref("media.videocontrols.picture-in-picture.video-toggle.enabled", false);
lockPref("ui.osk.enabled", false);
lockPref("browser.newtabpage.activity-stream.showSearch", true);
lockPref("media.hardwaremediakeys.enabled", false);
lockPref("browser.newtabpage.activity-stream.section.highlights.includeBookmarks", false);
lockPref("browser.newtabpage.activity-stream.logowordmark.alwaysVisible", false);
let profile_directory;
if (profile_directory = getenv('USERPROFILE') || getenv('HOME')) {
  defaultPref('autoadmin.global_config_url', `file://${profile_directory}/.librewolf/librewolf.overrides.cfg`);
}
